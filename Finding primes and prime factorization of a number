#include<bits/stdc++.h>
using namespace std;

// determine number of primes and store the primes using sieve of eratosthenes
#define SIZE_N 100000
#define SIZE_P 100000
bool flag[SIZE_N+5];
long long primes[SIZE_P+5];
int seive(){
    long long i,j,total=0,val;
    for(i=2; i<=SIZE_N; i++) flag[i]=1;
    val=sqrt(SIZE_N)+1;
    for(i=2; i < val; i++)
        if(flag[i])
            for(j=i; j*i<=SIZE_N; j++)
                flag[i*j] = 0;
    for(i=2; i<=SIZE_N; i++)
        if(flag[i])
            primes[total++]=i;
    return total;
}

// determine the prime factorization of the number
long long store_primes[2300],freq_primes[2300], Total_Prime, ans;
void divisor(long long N){
    long long val,count;
    val=sqrt(N)+1;
    Total_Prime=0;
    for(int i=0; primes[i]<val; i++){
        if(N%primes[i]==0){
            count=0;
            while(N%primes[i]==0)
            {
                N/=primes[i];
                count++;
            }
            store_primes[Total_Prime]=primes[i];
            freq_primes[Total_Prime]=count;
            Total_Prime++;
            val=sqrt(N)+1;
        }
    }
}

int main()
{
    int total = seive();
    long long n;
    cin >> n;
    divisor(n);
    for(long long i=0; i<Total_Prime; i++){
        cout << store_primes[i] << "^" << freq_primes[i] << " ";
    }
    return 0;
}
